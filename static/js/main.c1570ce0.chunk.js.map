{"version":3,"sources":["Components/Section/Section.styled.jsx","Components/Section/Section.jsx","Components/FeedbackOptions/FeedbackOptions.styled.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.styled.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.styled.jsx","Components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Title","h1","Section","title","children","propType","PropTypes","string","node","FeedbackButton","button","FeedbackPannel","FeedbackOptions","onLeaveFeedback","options","map","option","type","onClick","array","func","isRequired","Statistic","p","props","higlight","StatisticPannel","Statistics","good","neutral","bad","total","positivePercentage","number","Message","Notification","message","App","state","setState","prevState","hasOwnProperty","countTotalFeedback","Object","values","reduce","prevValue","value","countPositiveFeedbackPercentage","toFixed","this","keys","totalFeedback","positiveFeedbcakPercentage","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1570ce0.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 1400px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n`\r\nexport const Title = styled.h1`\r\n`","import { Wrapper, Title } from './Section.styled';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const Section = ({title, children}) => {\r\n    return (\r\n        <Wrapper><Title>{title}</Title>{children}</Wrapper>\r\n    )\r\n}\r\n\r\nSection.propType = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const FeedbackButton = styled.button`\r\n    margin-right: 5px;\r\n    margin-bottom: 30px;\r\n    width: 100px;\r\n    height: 40px;\r\n    font-size: medium;\r\n    font-weight: bold;\r\n    background-color: #ec8065;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\nexport const FeedbackPannel = styled.div`\r\n    & :first-of-type {\r\n        background-color: #71c64d;\r\n    }\r\n\r\n    & :nth-of-type(2) {\r\n        background-color: #d9f16b;\r\n    }\r\n`","import PropTypes from 'prop-types'\r\nimport { FeedbackButton, FeedbackPannel } from \"./FeedbackOptions.styled\";\r\n\r\nexport const FeedbackOptions = ({ onLeaveFeedback, options }) => {\r\n    return (\r\n        <FeedbackPannel>\r\n            {options.map(option => (<FeedbackButton  key={option} type=\"button\" onClick={() => onLeaveFeedback(option)}>{option}</FeedbackButton>))}\r\n        </FeedbackPannel>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propType = {\r\n    options: PropTypes.array,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const Statistic = styled.p`\r\n    margin: 0;\r\n    margin-bottom: 2px;\r\n    font-weight: ${props => props.higlight && 'bold'}\r\n`\r\n\r\nexport const StatisticPannel = styled.div`\r\n    display: inline-flex;\r\n    flex-direction: column;\r\n`","import { StatisticPannel, Statistic } from './Statistics.styled';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Statistics = ({good, neutral, bad, total, positivePercentage}) => {\r\n    return (\r\n        <StatisticPannel>\r\n            <Statistic>Good: {good}</Statistic>\r\n            <Statistic>Neutral: {neutral}</Statistic>\r\n            <Statistic>Bad: {bad}</Statistic>\r\n            <Statistic higlight>Total: {total}</Statistic>\r\n            <Statistic higlight>Positive feedback: {positivePercentage}%</Statistic>\r\n        </StatisticPannel>\r\n    )\r\n}\r\n\r\nStatistics.propType = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number,\r\n}","import styled from \"@emotion/styled\"\r\n\r\nexport const Message = styled.p`\r\n    display: inline-flex;\r\n    font-weight: bold;\r\n    padding: 5px;\r\n    border: 1px solid tomato;\r\n    border-radius: 3px;\r\n    background-color: tomato;\r\n`","import { Message } from \"./Notification.styled\"\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const Notification = ({ message }) => {\r\n    return (\r\n        <Message>{message}</Message>\r\n    )\r\n}\r\n\r\nNotification.propType = {\r\n    message: PropTypes.string,\r\n}","import { Component } from 'react';\nimport { Section } from './Components/Section/Section';\nimport { FeedbackOptions } from './Components/FeedbackOptions/FeedbackOptions';\nimport { Statistics } from './Components/Statistics/Statistics';\nimport { Notification } from './Components/Notification/Notification';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => {\n      if (this.state.hasOwnProperty(option)) {\n        return {\n          [option]: prevState[option] + 1,\n        };\n      }\n    });\n  };\n\n  countTotalFeedback = () => {\n    const values = Object.values(this.state);\n    const total = values.reduce((prevValue, value) => {\n      return prevValue + value;\n    }, 0);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const percentage = (this.state.good * 100) / total;\n    return percentage.toFixed(0);\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    const options = Object.keys(this.state);\n  \n    const totalFeedback = this.countTotalFeedback();\n    const positiveFeedbcakPercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div className=\"App\">\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n\n          {totalFeedback !== 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedback}\n              positivePercentage={positiveFeedbcakPercentage}\n            />\n          ) : (\n            <Notification message={'No feedback given'} />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}